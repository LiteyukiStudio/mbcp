import{_ as a,c as r,o as e,a4 as l}from"./chunks/framework.DpC1ZpOZ.js";const h=JSON.parse('{"title":"mbcp.mp_math.mp_math_typing","description":"","frontmatter":{"title":"mbcp.mp_math.mp_math_typing","lastUpdated":false},"headers":[],"relativePath":"zht/api/mp_math/mp_math_typing.md","filePath":"zht/api/mp_math/mp_math_typing.md"}'),n={name:"zht/api/mp_math/mp_math_typing.md"},o=l('<h1 id="mbcp-mp-math-mp-math-typing" tabindex="-1">mbcp.mp_math.mp_math_typing <a class="header-anchor" href="#mbcp-mp-math-mp-math-typing" aria-label="Permalink to &quot;mbcp.mp_math.mp_math_typing&quot;">​</a></h1><p><strong>説明</strong>: 本模块用于内部类型提示</p><h3 id="var-realnumber-int-float" tabindex="-1">var <code>RealNumber</code> = <code>int | float</code> <a class="header-anchor" href="#var-realnumber-int-float" aria-label="Permalink to &quot;var `RealNumber` = `int | float`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 实数</p></li></ul><h3 id="var-number-realnumber-complex" tabindex="-1">var <code>Number</code> = <code>RealNumber | complex</code> <a class="header-anchor" href="#var-number-realnumber-complex" aria-label="Permalink to &quot;var `Number` = `RealNumber | complex`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 数</p></li></ul><h3 id="var-singlevar-typevar-singlevar-bound-number" tabindex="-1">var <code>SingleVar</code> = <code>TypeVar(&#39;SingleVar&#39;, bound=Number)</code> <a class="header-anchor" href="#var-singlevar-typevar-singlevar-bound-number" aria-label="Permalink to &quot;var `SingleVar` = `TypeVar(&#39;SingleVar&#39;, bound=Number)`&quot;">​</a></h3><ul><li><strong>説明</strong>: 单变量</li></ul><h3 id="var-arrayvar-typevar-arrayvar-bound-iterable-number" tabindex="-1">var <code>ArrayVar</code> = <code>TypeVar(&#39;ArrayVar&#39;, bound=Iterable[Number])</code> <a class="header-anchor" href="#var-arrayvar-typevar-arrayvar-bound-iterable-number" aria-label="Permalink to &quot;var `ArrayVar` = `TypeVar(&#39;ArrayVar&#39;, bound=Iterable[Number])`&quot;">​</a></h3><ul><li><strong>説明</strong>: 数组变量</li></ul><h3 id="var-var-singlevar-arrayvar" tabindex="-1">var <code>Var</code> = <code>SingleVar | ArrayVar</code> <a class="header-anchor" href="#var-var-singlevar-arrayvar" aria-label="Permalink to &quot;var `Var` = `SingleVar | ArrayVar`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 变量</p></li></ul><h3 id="var-onesinglevarfunc-callable-singlevar-singlevar" tabindex="-1">var <code>OneSingleVarFunc</code> = <code>Callable[[SingleVar], SingleVar]</code> <a class="header-anchor" href="#var-onesinglevarfunc-callable-singlevar-singlevar" aria-label="Permalink to &quot;var `OneSingleVarFunc` = `Callable[[SingleVar], SingleVar]`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 一元单变量函数</p></li></ul><h3 id="var-onearrayfunc-callable-arrayvar-arrayvar" tabindex="-1">var <code>OneArrayFunc</code> = <code>Callable[[ArrayVar], ArrayVar]</code> <a class="header-anchor" href="#var-onearrayfunc-callable-arrayvar-arrayvar" aria-label="Permalink to &quot;var `OneArrayFunc` = `Callable[[ArrayVar], ArrayVar]`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 一元数组函数</p></li></ul><h3 id="var-onevarfunc-onesinglevarfunc-onearrayfunc" tabindex="-1">var <code>OneVarFunc</code> = <code>OneSingleVarFunc | OneArrayFunc</code> <a class="header-anchor" href="#var-onevarfunc-onesinglevarfunc-onearrayfunc" aria-label="Permalink to &quot;var `OneVarFunc` = `OneSingleVarFunc | OneArrayFunc`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 一元函数</p></li></ul><h3 id="var-twosinglevarsfunc-callable-singlevar-singlevar-singlevar" tabindex="-1">var <code>TwoSingleVarsFunc</code> = <code>Callable[[SingleVar, SingleVar], SingleVar]</code> <a class="header-anchor" href="#var-twosinglevarsfunc-callable-singlevar-singlevar-singlevar" aria-label="Permalink to &quot;var `TwoSingleVarsFunc` = `Callable[[SingleVar, SingleVar], SingleVar]`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 二元单变量函数</p></li></ul><h3 id="var-twoarraysfunc-callable-arrayvar-arrayvar-arrayvar" tabindex="-1">var <code>TwoArraysFunc</code> = <code>Callable[[ArrayVar, ArrayVar], ArrayVar]</code> <a class="header-anchor" href="#var-twoarraysfunc-callable-arrayvar-arrayvar-arrayvar" aria-label="Permalink to &quot;var `TwoArraysFunc` = `Callable[[ArrayVar, ArrayVar], ArrayVar]`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 二元数组函数</p></li></ul><h3 id="var-twovarsfunc-twosinglevarsfunc-twoarraysfunc" tabindex="-1">var <code>TwoVarsFunc</code> = <code>TwoSingleVarsFunc | TwoArraysFunc</code> <a class="header-anchor" href="#var-twovarsfunc-twosinglevarsfunc-twoarraysfunc" aria-label="Permalink to &quot;var `TwoVarsFunc` = `TwoSingleVarsFunc | TwoArraysFunc`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 二元函数</p></li></ul><h3 id="var-threesinglevarsfunc-callable-singlevar-singlevar-singlevar-singlevar" tabindex="-1">var <code>ThreeSingleVarsFunc</code> = <code>Callable[[SingleVar, SingleVar, SingleVar], SingleVar]</code> <a class="header-anchor" href="#var-threesinglevarsfunc-callable-singlevar-singlevar-singlevar-singlevar" aria-label="Permalink to &quot;var `ThreeSingleVarsFunc` = `Callable[[SingleVar, SingleVar, SingleVar], SingleVar]`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 三元单变量函数</p></li></ul><h3 id="var-threearraysfunc-callable-arrayvar-arrayvar-arrayvar-arrayvar" tabindex="-1">var <code>ThreeArraysFunc</code> = <code>Callable[[ArrayVar, ArrayVar, ArrayVar], ArrayVar]</code> <a class="header-anchor" href="#var-threearraysfunc-callable-arrayvar-arrayvar-arrayvar-arrayvar" aria-label="Permalink to &quot;var `ThreeArraysFunc` = `Callable[[ArrayVar, ArrayVar, ArrayVar], ArrayVar]`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 三元数组函数</p></li></ul><h3 id="var-threevarsfunc-threesinglevarsfunc-threearraysfunc" tabindex="-1">var <code>ThreeVarsFunc</code> = <code>ThreeSingleVarsFunc | ThreeArraysFunc</code> <a class="header-anchor" href="#var-threevarsfunc-threesinglevarsfunc-threearraysfunc" aria-label="Permalink to &quot;var `ThreeVarsFunc` = `ThreeSingleVarsFunc | ThreeArraysFunc`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 三元函数</p></li></ul><h3 id="var-multisinglevarsfunc-callable-singlevar" tabindex="-1">var <code>MultiSingleVarsFunc</code> = <code>Callable[..., SingleVar]</code> <a class="header-anchor" href="#var-multisinglevarsfunc-callable-singlevar" aria-label="Permalink to &quot;var `MultiSingleVarsFunc` = `Callable[..., SingleVar]`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 多元单变量函数</p></li></ul><h3 id="var-multiarraysfunc-callable-arrayvar" tabindex="-1">var <code>MultiArraysFunc</code> = <code>Callable[..., ArrayVar]</code> <a class="header-anchor" href="#var-multiarraysfunc-callable-arrayvar" aria-label="Permalink to &quot;var `MultiArraysFunc` = `Callable[..., ArrayVar]`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 多元数组函数</p></li></ul><h3 id="var-multivarsfunc-multisinglevarsfunc-multiarraysfunc" tabindex="-1">var <code>MultiVarsFunc</code> = <code>MultiSingleVarsFunc | MultiArraysFunc</code> <a class="header-anchor" href="#var-multivarsfunc-multisinglevarsfunc-multiarraysfunc" aria-label="Permalink to &quot;var `MultiVarsFunc` = `MultiSingleVarsFunc | MultiArraysFunc`&quot;">​</a></h3><ul><li><p><strong>類型</strong>: <code>TypeAlias</code></p></li><li><p><strong>説明</strong>: 多元函数</p></li></ul>',36),i=[o];function t(c,s,u,d,g,v){return e(),r("div",null,i)}const y=a(n,[["render",t]]);export{h as __pageData,y as default};
